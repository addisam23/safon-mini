generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  password          String
  role              String    @default("user")
  telegramId        String?   @unique
  telegramUsername  String?
  referralCode      String    @unique
  balance           Float     @default(0)
  totalEarnings     Float     @default(0)
  status            String    @default("active")
  isVerified        Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Referrals made by this user
  referrals         Referral[] @relation("ReferrerReferrals")
  // Referrals where this user was referred
  referredBy        Referral[] @relation("ReferredReferrals")
  
  withdrawRequests  WithdrawRequest[]
  paymentProofs     PaymentProof[]
  adminApprovals    PaymentProof[] @relation("AdminApprovals")

  @@map("users")
}

model Referral {
  id          String   @id @default(cuid())
  referrerId  String
  referredId  String
  status      String   @default("pending") // pending, completed, rejected
  reward      Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  referrer    User     @relation("ReferrerReferrals", fields: [referrerId], references: [id], onDelete: Cascade)
  referred    User     @relation("ReferredReferrals", fields: [referredId], references: [id], onDelete: Cascade)

  @@unique([referrerId, referredId])
  @@map("referrals")
}

model WithdrawRequest {
  id          String   @id @default(cuid())
  userId      String
  method      String   // telebirr, cbe, boa, chapa
  amount      Float
  accountInfo String
  status      String   @default("pending") // pending, processing, completed, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("withdraw_requests")
}

model PaymentProof {
  id          String   @id @default(cuid())
  userId      String
  imageUrl    String
  status      String   @default("pending") // pending, approved, rejected
  adminId     String?
  adminNote   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin       User?    @relation("AdminApprovals", fields: [adminId], references: [id], onDelete: SetNull)

  @@map("payment_proofs")
}
